generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id               String          @id @default(uuid())
  displayname        String
  email            String          @unique
  username         String          @unique
  password         String
  status           String         @default("OFFLINE")
  createdAt        DateTime        @default(now())
  Movies           UserMovieList[] 
  chats            Chat[]
  room             Room?         @relation("UserRoom")
  friend           Friendship[]  @relation("MyFriendships")
  friendships      Friendship[]  @relation("FriendOf")
  Requests         FriendRequests[]  @relation("requests")
  votes Vote[]
}

model FriendRequests {
  id    Int   @id  @default(autoincrement())
  user  User  @relation(fields: [from], references: [id], name: "requests")
  from  String  
  toId  String  
  fromUsername String
  createdAt   DateTime  @default(now()) 
  @@unique([from,toId])
}


model Friendship {
  id  Int           @id @default(autoincrement())
  user User         @relation(fields: [userId], references: [id], name:"MyFriendships")
  userId  String  
  friend  User      @relation(fields: [friendId], references: [id], name:"FriendOf")
  friendId String   
  @@unique([userId, friendId])
}

 model Room {
  id             String  @id @default(uuid())
  playingId      String  @default("")
  playingTitle   String  @default("")
  playingType    String  @default("")
  playingAnimeId String  @default("")
  isPlaying      Boolean @default(false)
  currentTime    Float   @default(0.0)
  episode        Int     @default(1)
  season         Int     @default(1)
  user           User    @relation(fields: [userId], references: [id], name: "UserRoom")
  userId         String  @unique
}


model Chat {
  id               Int           @id @default(autoincrement())
  type             String
  displayname      String
  time             String
  createdAt        DateTime      @default(now())
  message          String        // Question in case of a poll, normal message otherwise
  options          pollOptions[] // Relation to pollOptions
  roomId           String
  user             User          @relation(fields: [roomId], references: [id])
  multipleVotes    Boolean       @default(false)
  edited           Boolean       @default(false)
  votes            Vote[]        // Relation to track votes
  
  // New field for self-referencing relationship
  replyToId        Int?          // Optional, because not all messages are replies
  replyTo          Chat?         @relation("MessageReplies", fields: [replyToId], references: [id])
  replies          Chat[]        @relation("MessageReplies")

  @@index([replyToId]) // Index for performance on replies
}


model pollOptions {
  id      Int    @id @default(autoincrement())
  option  String // Poll option text
  chatId  Int
  chat    Chat   @relation(fields: [chatId], references: [id])
  votes   Vote[] // Relation to track votes for this option
}

model Vote {
  id        Int         @id @default(autoincrement())
  userId    String
  user      User        @relation(fields: [userId], references: [id]) // Reference to User
  optionId  Int
  option    pollOptions @relation(fields: [optionId], references: [id])
  chatId    Int
  chat      Chat        @relation(fields: [chatId], references: [id])
  @@unique([optionId,userId])
}


model UserMovieList {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  movie    Movie   @relation(fields: [movieId], references: [Mid])
  userId   String
  movieId  String
  Mid      Int
  episode  Int     @default(1)
  season   Int     @default(1)
  listType String
  createdAt  DateTime    @default(now())
  @@unique([userId, Mid, listType])
}

model Movie {
  Mid               String           @id @default(uuid()) // Internal primary key
  id                Int              @unique              // External unique identifier
  adult             Boolean?
  title             String?
  backdrop_path     String?
  first_air_date    String?
  genre_ids         GenreIds[]       
  media_type        String?
  name              String?
  origin_country    OriginCountry[] 
  original_language String?
  original_name     String?
  overview          String?
  popularity        Int?
  poster_path       String?
  vote_average      Float?          
  vote_count        Int?              
  userLists         UserMovieList[]
}

model GenreIds {
  id       Int    @id @default(autoincrement())
  movieId  String
  movie    Movie  @relation(fields: [movieId], references: [Mid])
  genre_id Int
}

model OriginCountry {
  id       Int    @id @default(autoincrement())
  movieId  String
  movie    Movie  @relation(fields: [movieId], references: [Mid])
  country  String
}




